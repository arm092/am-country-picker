!function(t,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n();else if("function"==typeof define&&define.amd)define([],n);else{var e=n();for(var r in e)("object"==typeof exports?exports:t)[r]=e[r]}}(window,function(){return function(t){function n(n){for(var e,i,o=n[0],a=n[1],s=0,c=[];s<o.length;s++)i=o[s],r[i]&&c.push(r[i][0]),r[i]=0;for(e in a)Object.prototype.hasOwnProperty.call(a,e)&&(t[e]=a[e]);for(u&&u(n);c.length;)c.shift()()}var e={},r={1:0};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.e=function(t){var n=[],e=r[t];if(0!==e)if(e)n.push(e[2]);else{var o=new Promise(function(n,i){e=r[t]=[n,i]});n.push(e[2]=o);var a,s=document.getElementsByTagName("head")[0],u=document.createElement("script");u.charset="utf-8",u.timeout=120,i.nc&&u.setAttribute("nonce",i.nc),u.src=function(t){return i.p+""+t+".amcpicker.js"}(t),a=function(n){u.onerror=u.onload=null,clearTimeout(c);var e=r[t];if(0!==e){if(e){var i=n&&("load"===n.type?"missing":n.type),o=n&&n.target&&n.target.src,a=new Error("Loading chunk "+t+" failed.\n("+i+": "+o+")");a.type=i,a.request=o,e[1](a)}r[t]=void 0}};var c=setTimeout(function(){a({type:"timeout",target:u})},12e4);u.onerror=u.onload=a,s.appendChild(u)}return Promise.all(n)},i.m=t,i.c=e,i.d=function(t,n,e){i.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,n){if(1&n&&(t=i(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(i.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)i.d(e,r,function(n){return t[n]}.bind(null,r));return e},i.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(n,"a",n),n},i.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},i.p="",i.oe=function(t){throw console.error(t),t};var o=window.webpackJsonp=window.webpackJsonp||[],a=o.push.bind(o);o.push=n,o=o.slice();for(var s=0;s<o.length;s++)n(o[s]);var u=a;return i(i.s=5)}([function(t,n,e){!function(t){function n(t,n,e){var r;return n&&"object"==typeof n&&(void 0!==n[t]?r=n[t]:e&&n.get&&"function"==typeof n.get&&(r=n.get(t))),r}t.Template=function(t,n,e,r){t=t||{},this.r=t.code||this.r,this.c=e,this.options=r||{},this.text=n||"",this.partials=t.partials||{},this.subs=t.subs||{},this.buf=""},t.Template.prototype={r:function(t,n,e){return""},v:function(t){return t=u(t),s.test(t)?t.replace(e,"&amp;").replace(r,"&lt;").replace(i,"&gt;").replace(o,"&#39;").replace(a,"&quot;"):t},t:u,render:function(t,n,e){return this.ri([t],n||{},e)},ri:function(t,n,e){return this.r(t,n,e)},ep:function(t,n){var e=this.partials[t],r=n[e.name];if(e.instance&&e.base==r)return e.instance;if("string"==typeof r){if(!this.c)throw new Error("No compiler available.");r=this.c.compile(r,this.options)}if(!r)return null;if(this.partials[t].base=r,e.subs){for(key in n.stackText||(n.stackText={}),e.subs)n.stackText[key]||(n.stackText[key]=void 0!==this.activeSub&&n.stackText[this.activeSub]?n.stackText[this.activeSub]:this.text);r=function(t,n,e,r,i,o){function a(){}function s(){}var u;a.prototype=t,s.prototype=t.subs;var c=new a;for(u in c.subs=new s,c.subsText={},c.buf="",r=r||{},c.stackSubs=r,c.subsText=o,n)r[u]||(r[u]=n[u]);for(u in r)c.subs[u]=r[u];for(u in i=i||{},c.stackPartials=i,e)i[u]||(i[u]=e[u]);for(u in i)c.partials[u]=i[u];return c}(r,e.subs,e.partials,this.stackSubs,this.stackPartials,n.stackText)}return this.partials[t].instance=r,r},rp:function(t,n,e,r){var i=this.ep(t,e);return i?i.ri(n,e,r):""},rs:function(t,n,e){var r=t[t.length-1];if(c(r))for(var i=0;i<r.length;i++)t.push(r[i]),e(t,n,this),t.pop();else e(t,n,this)},s:function(t,n,e,r,i,o,a){var s;return(!c(t)||0!==t.length)&&("function"==typeof t&&(t=this.ms(t,n,e,r,i,o,a)),s=!!t,!r&&s&&n&&n.push("object"==typeof t?t:n[n.length-1]),s)},d:function(t,e,r,i){var o,a=t.split("."),s=this.f(a[0],e,r,i),u=this.options.modelGet,f=null;if("."===t&&c(e[e.length-2]))s=e[e.length-1];else for(var l=1;l<a.length;l++)void 0!==(o=n(a[l],s,u))?(f=s,s=o):s="";return!(i&&!s)&&(i||"function"!=typeof s||(e.push(f),s=this.mv(s,e,r),e.pop()),s)},f:function(t,e,r,i){for(var o=!1,a=!1,s=this.options.modelGet,u=e.length-1;u>=0;u--)if(void 0!==(o=n(t,e[u],s))){a=!0;break}return a?(i||"function"!=typeof o||(o=this.mv(o,e,r)),o):!i&&""},ls:function(t,n,e,r,i){var o=this.options.delimiters;return this.options.delimiters=i,this.b(this.ct(u(t.call(n,r)),n,e)),this.options.delimiters=o,!1},ct:function(t,n,e){if(this.options.disableLambda)throw new Error("Lambda features disabled.");return this.c.compile(t,this.options).render(n,e)},b:function(t){this.buf+=t},fl:function(){var t=this.buf;return this.buf="",t},ms:function(t,n,e,r,i,o,a){var s,u=n[n.length-1],c=t.call(u);return"function"==typeof c?!!r||(s=this.activeSub&&this.subsText&&this.subsText[this.activeSub]?this.subsText[this.activeSub]:this.text,this.ls(c,u,e,s.substring(i,o),a)):c},mv:function(t,n,e){var r=n[n.length-1],i=t.call(r);return"function"==typeof i?this.ct(u(i.call(r)),r,e):i},sub:function(t,n,e,r){var i=this.subs[t];i&&(this.activeSub=t,i(n,e,this,r),this.activeSub=!1)}};var e=/&/g,r=/</g,i=/>/g,o=/\'/g,a=/\"/g,s=/[&<>\"\']/;function u(t){return String(null===t||void 0===t?"":t)}var c=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}}(n)},function(t,n,e){!function(t){var n=/\S/,e=/\"/g,r=/\n/g,i=/\r/g,o=/\\/g,a=/\u2028/,s=/\u2029/;function u(t){"}"===t.n.substr(t.n.length-1)&&(t.n=t.n.substring(0,t.n.length-1))}function c(t){return t.trim?t.trim():t.replace(/^\s*|\s*$/g,"")}function f(t,n,e){if(n.charAt(e)!=t.charAt(0))return!1;for(var r=1,i=t.length;r<i;r++)if(n.charAt(e+r)!=t.charAt(r))return!1;return!0}t.tags={"#":1,"^":2,"<":3,$:4,"/":5,"!":6,">":7,"=":8,_v:9,"{":10,"&":11,_t:12},t.scan=function(e,r){var i=e.length,o=0,a=null,s=null,l="",p=[],h=!1,d=0,g=0,v="{{",b="}}";function m(){l.length>0&&(p.push({tag:"_t",text:new String(l)}),l="")}function y(e,r){if(m(),e&&function(){for(var e=!0,r=g;r<p.length;r++)if(!(e=t.tags[p[r].tag]<t.tags._v||"_t"==p[r].tag&&null===p[r].text.match(n)))return!1;return e}())for(var i,o=g;o<p.length;o++)p[o].text&&((i=p[o+1])&&">"==i.tag&&(i.indent=p[o].text.toString()),p.splice(o,1));else r||p.push({tag:"\n"});h=!1,g=p.length}function w(t,n){var e="="+b,r=t.indexOf(e,n),i=c(t.substring(t.indexOf("=",n)+1,r)).split(" ");return v=i[0],b=i[i.length-1],r+e.length-1}for(r&&(r=r.split(" "),v=r[0],b=r[1]),d=0;d<i;d++)0==o?f(v,e,d)?(--d,m(),o=1):"\n"==e.charAt(d)?y(h):l+=e.charAt(d):1==o?(d+=v.length-1,"="==(a=(s=t.tags[e.charAt(d+1)])?e.charAt(d+1):"_v")?(d=w(e,d),o=0):(s&&d++,o=2),h=d):f(b,e,d)?(p.push({tag:a,n:c(l),otag:v,ctag:b,i:"/"==a?h-v.length:d+b.length}),l="",d+=b.length-1,o=0,"{"==a&&("}}"==b?d++:u(p[p.length-1]))):l+=e.charAt(d);return y(h,!0),p};var l={_t:!0,"\n":!0,$:!0,"/":!0};function p(t,n){for(var e=0,r=n.length;e<r;e++)if(n[e].o==t.n)return t.tag="#",!0}function h(t,n,e){for(var r=0,i=e.length;r<i;r++)if(e[r].c==t&&e[r].o==n)return!0}function d(t){var n=[];for(var e in t.partials)n.push('"'+v(e)+'":{name:"'+v(t.partials[e].name)+'", '+d(t.partials[e])+"}");return"partials: {"+n.join(",")+"}, subs: "+function(t){var n=[];for(var e in t)n.push('"'+v(e)+'": function(c,p,t,i) {'+t[e]+"}");return"{ "+n.join(",")+" }"}(t.subs)}t.stringify=function(n,e,r){return"{code: function (c,p,i) { "+t.wrapMain(n.code)+" },"+d(n)+"}"};var g=0;function v(t){return t.replace(o,"\\\\").replace(e,'\\"').replace(r,"\\n").replace(i,"\\r").replace(a,"\\u2028").replace(s,"\\u2029")}function b(t){return~t.indexOf(".")?"d":"f"}function m(t,n){var e="<"+(n.prefix||"")+t.n+g++;return n.partials[e]={name:t.n,partials:{}},n.code+='t.b(t.rp("'+v(e)+'",c,p,"'+(t.indent||"")+'"));',e}function y(t,n){n.code+="t.b(t.t(t."+b(t.n)+'("'+v(t.n)+'",c,p,0)));'}function w(t){return"t.b("+t+");"}t.generate=function(n,e,r){g=0;var i={code:"",subs:{},partials:{}};return t.walk(n,i),r.asString?this.stringify(i,e,r):this.makeTemplate(i,e,r)},t.wrapMain=function(t){return'var t=this;t.b(i=i||"");'+t+"return t.fl();"},t.template=t.Template,t.makeTemplate=function(t,n,e){var r=this.makePartials(t);return r.code=new Function("c","p","i",this.wrapMain(t.code)),new this.template(r,n,this,e)},t.makePartials=function(t){var n,e={subs:{},partials:t.partials,name:t.name};for(n in e.partials)e.partials[n]=this.makePartials(e.partials[n]);for(n in t.subs)e.subs[n]=new Function("c","p","t","i",t.subs[n]);return e},t.codegen={"#":function(n,e){e.code+="if(t.s(t."+b(n.n)+'("'+v(n.n)+'",c,p,1),c,p,0,'+n.i+","+n.end+',"'+n.otag+" "+n.ctag+'")){t.rs(c,p,function(c,p,t){',t.walk(n.nodes,e),e.code+="});c.pop();}"},"^":function(n,e){e.code+="if(!t.s(t."+b(n.n)+'("'+v(n.n)+'",c,p,1),c,p,1,0,0,"")){',t.walk(n.nodes,e),e.code+="};"},">":m,"<":function(n,e){var r={partials:{},code:"",subs:{},inPartial:!0};t.walk(n.nodes,r);var i=e.partials[m(n,e)];i.subs=r.subs,i.partials=r.partials},$:function(n,e){var r={subs:{},code:"",partials:e.partials,prefix:n.n};t.walk(n.nodes,r),e.subs[n.n]=r.code,e.inPartial||(e.code+='t.sub("'+v(n.n)+'",c,p,i);')},"\n":function(t,n){n.code+=w('"\\n"'+(t.last?"":" + i"))},_v:function(t,n){n.code+="t.b(t.v(t."+b(t.n)+'("'+v(t.n)+'",c,p,0)));'},_t:function(t,n){n.code+=w('"'+v(t.text)+'"')},"{":y,"&":y},t.walk=function(n,e){for(var r,i=0,o=n.length;i<o;i++)(r=t.codegen[n[i].tag])&&r(n[i],e);return e},t.parse=function(n,e,r){return function n(e,r,i,o){var a,s=[],u=null,c=null;for(a=i[i.length-1];e.length>0;){if(c=e.shift(),a&&"<"==a.tag&&!(c.tag in l))throw new Error("Illegal content in < super tag.");if(t.tags[c.tag]<=t.tags.$||p(c,o))i.push(c),c.nodes=n(e,c.tag,i,o);else{if("/"==c.tag){if(0===i.length)throw new Error("Closing tag without opener: /"+c.n);if(u=i.pop(),c.n!=u.n&&!h(c.n,u.n,o))throw new Error("Nesting error: "+u.n+" vs. "+c.n);return u.end=c.i,s}"\n"==c.tag&&(c.last=0==e.length||"\n"==e[0].tag)}s.push(c)}if(i.length>0)throw new Error("missing closing tag: "+i.pop().n);return s}(n,0,[],(r=r||{}).sectionTags||[])},t.cache={},t.cacheKey=function(t,n){return[t,!!n.asString,!!n.disableLambda,n.delimiters,!!n.modelGet].join("||")},t.compile=function(n,e){e=e||{};var r=t.cacheKey(n,e),i=this.cache[r];if(i){var o=i.partials;for(var a in o)delete o[a].instance;return i}return i=this.generate(this.parse(this.scan(n,e.delimiters),n,e),n,e),this.cache[r]=i}}(n)},function(t,n,e){var r=e(1);r.Template=e(0).Template,r.template=r.Template,t.exports=r},function(t,n,e){var r=e(2);t.exports=function(){var t=new r.Template({code:function(t,n,e){var r=this;return r.b(e=e||""),r.b('<option class = "acp-country '),r.b(r.v(r.f("countryCode",t,n,0))),r.b('" value="'),r.b(r.v(r.f("countryCode",t,n,0))),r.b('">\r'),r.b("\n"+e),r.b("    "),r.b(r.t(r.f("countryName",t,n,0))),r.b("\r"),r.b("\n"+e),r.b("</option>"),r.fl()},partials:{},subs:{}},'<option class = "acp-country {{countryCode}}" value="{{countryCode}}">\r\n    {{{countryName}}}\r\n</option>',r);return t.render.apply(t,arguments)}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default={exclude:[],flags:!1,flagsSprite:"../images/flags.webp"}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),o=s(e(4)),a=s(e(3));function s(t){return t&&t.__esModule?t:{default:t}}void 0!==window.jQuery&&function(t){t.fn.amcPicker=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;this.each(function(){var e=t(this);new u(e[0],n)})}}(jQuery);var u=function(){function t(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.defaults=Object.assign({},o.default),"object"===(void 0===e?"undefined":r(e))&&this._setDefaults(e),this.picker=n,this.language=document.querySelector("html").getAttribute("lang")||"en",this.render()}return i(t,[{key:"_setDefaults",value:function(t){var n=this;Object.keys(t).forEach(function(e){n.defaults.hasOwnProperty(e)&&("exclude"===e&&(t[e]=t[e].map(function(t){return t.toUpperCase()})),n.defaults[e]=t[e])})}},{key:"setCountries",value:function(){var t=function(t){return function(){var n=t.apply(this,arguments);return new Promise(function(t,e){return function r(i,o){try{var a=n[i](o),s=a.value}catch(t){return void e(t)}if(!a.done)return Promise.resolve(s).then(function(t){r("next",t)},function(t){r("throw",t)});t(s)}("next")})}}(regeneratorRuntime.mark(function t(){var n,r;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(void 0===window.amCountries){t.next=4;break}this.countries=window.amCountries,t.next=9;break;case 4:return t.next=6,e.e(0).then(e.t.bind(null,6,7));case 6:n=t.sent,r=n.default,this.countries=r;case 9:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"render",value:function(){var t=this;this.setCountries().then(function(){var n=t.countries.hasOwnProperty(t.language)?t.countries[t.language]:t.countries.en,e="";for(var r in n)n.hasOwnProperty(r)&&(t.defaults.exclude.includes(r)||(e+=(0,a.default)({countryCode:r,countryName:n[r]})));t.picker.innerHTML=e})}}]),t}();n.default=u}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,